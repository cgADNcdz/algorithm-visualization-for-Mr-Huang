{"ast":null,"code":"import _slicedToArray from \"/home/cdz/Code/FrontEnd/nw-react/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/home/cdz/Code/FrontEnd/nw-react/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/cdz/Code/FrontEnd/nw-react/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/cdz/Code/FrontEnd/nw-react/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/cdz/Code/FrontEnd/nw-react/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/cdz/Code/FrontEnd/nw-react/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/cdz/Code/FrontEnd/nw-react/src/app/component/GraphSVG.js\";\n//import d3 from './d3.v4.min.js';\n//window.d3 = d3;\n//import $ from 'jquery';  //引入jquery\nimport Graph from \"./Graph.js\";\nimport MyMenu from \"../MyMenu.js\";\nimport { assertFunctionParent } from \"babel-types\";\n\nrequire('../../assets/play.png');\n\nrequire('../../assets/pause.png');\n\nvar React = require('react'); //import stepData from \"./testData.js\";\n\n\nvar $ = window.jQuery;\nvar stepData = null;\nvar _name = []; //存储点名\n//let STEP_COUNT = 0;　　　//学长以STEP_COUNT记录每一个动作的编号（是动作不是帧！！）->改为每一帧的编号\n\nvar actionStep = new Object(); //采用对象，是为了进行action_count的引用传递\n\nactionStep.STEP_COUNT = 1; //帧从１开始计数（只是为了符合动作表的第四个字段）\n\nactionStep.ACTION_COUNT = 0;\nwindow.question = true;\n\nvar GraphSVG =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(GraphSVG, _React$Component);\n\n  //其属性来自Panel...this.pros的传递,包括updtaState、node、link\n  function GraphSVG(props) {\n    var _this;\n\n    _classCallCheck(this, GraphSVG);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(GraphSVG).call(this, props));\n    _this.state = {}; //注意：关于点、边的颜色\n    //ＤＦＳ后台传递的颜色：初始化边表示（１０，１０，１０），初始点表示(91,155,2１3),选中点边表示（255,0,0）\n    //DJ后台传递颜色:初始化边（１０，１０，１０），初始化点（９１，１５５，２１３），\n\n    _this.DEFAULT_LINK_COLOR = \"#3a6bdb\"; //默认是(浅蓝色)\n\n    _this.INITIAL_LINK_COLOR = \"#0a0a0a\"; //初始化后边的颜色\n\n    _this.INITIAL_NODE_COLOR = \"#5B9BD5\"; //初始化后点的颜色\n\n    _this.SELECTED_LINK_COLOR = \"#ff0000\"; //选中的边，红色\n\n    _this.SELECTED_NODE_COLOR = \"#ff0000\"; //选中的点     \n\n    _this.path = null;\n    _this.state.speed = 0.5;\n    _this.state.play = \"stop\";\n    _this.state.start = \"\";\n    _this.state.end = \"\";\n    _this.state.S_NODE = new Map(); //Map是一组键值对的结构，具有极快的查找速度(误以为是Map.js导出的Map类)\n\n    _this.state.S_EDGE = new Map();\n    _this.state.question = true;\n    return _this;\n  }\n\n  _createClass(GraphSVG, [{\n    key: \"render\",\n    value: function render() {\n      this.clcMaxMin();\n      var nodes = this.renderNode();\n      var links = this.renderLink();\n      var controlstate = this.state.play === \"play\" ? \"pauseState\" : \"playState\";\n      return React.createElement(\"div\", {\n        id: \"graphWrap\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"main\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        style: {\n          width: \"100%\",\n          height: \"100%\",\n          backgroundColor: \"#FFF\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, React.createElement(\"svg\", {\n        ref: \"graph\",\n        width: \"100%\",\n        height: \"100%\",\n        version: \"1.1\",\n        xmlns: \"http://www.w3.org/2000/svg\",\n        onContextMenu: function onContextMenu(e) {\n          e.preventDefault();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, links, nodes))), React.createElement(\"div\", {\n        id: \"tool\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"question\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }, \" \\u63D0\\u95EE \", React.createElement(\"input\", {\n        id: \"question_checkbox\",\n        type: \"checkbox\",\n        checked: this.state.question,\n        onChange: this.checkChange.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66\n        },\n        __self: this\n      }), \" \"), React.createElement(\"div\", {\n        id: \"speed\",\n        title: \"\\u901F\\u5EA6\",\n        onClick: this.changeSpeed.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        id: \"speedValue\",\n        style: {\n          width: this.state.speed * 100 + \"%\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        id: \"prev\",\n        title: \"\\u4E0A\\u4E00\\u6B65\",\n        onClick: this.animate_stepback.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        id: \"start\",\n        title: \"\\u5F00\\u59CB/\\u6682\\u505C\",\n        className: controlstate,\n        onClick: this.play.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        id: \"next\",\n        title: \"\\u4E0B\\u4E00\\u6B65\",\n        onClick: this.animate_stepforward.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        id: \"end\",\n        title: \"\\u7ED3\\u675F\",\n        onClick: this.stop.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      })));\n    } //是否提问状态改变\n\n  }, {\n    key: \"checkChange\",\n    value: function checkChange(e) {\n      window.question = e.target.checked;\n      console.log(window.question);\n      this.setState({\n        question: !this.state.question\n      });\n    }\n  }, {\n    key: \"clcMaxMin\",\n    value: function clcMaxMin() {\n      var _this2 = this;\n\n      var max_lng = -Infinity,\n          min_lng = Infinity;\n      var max_lat = -Infinity,\n          min_lat = Infinity;\n      this.mid_lng = 0;\n      this.mid_lat = 0;\n      this.props.node.forEach(function (node) {\n        if (node.lat > max_lat) max_lat = node.lat;\n        if (node.lat < min_lat) min_lat = node.lat;\n        if (node.lng > max_lng) max_lng = node.lng;\n        if (node.lng < min_lng) min_lng = node.lng;\n        _this2.mid_lng += node.lng;\n        _this2.mid_lat += node.lat;\n      });\n      this.max_lng = max_lng;\n      this.min_lng = min_lng;\n      this.max_lat = max_lat;\n      this.min_lat = min_lat;\n      this.mid_lng /= this.props.node.length;\n      this.mid_lat /= this.props.node.length;\n    }\n  }, {\n    key: \"clcCoordinate\",\n    value: function clcCoordinate(lng, lat) {\n      var w = this.refs.graph.clientWidth;\n      var h = this.refs.graph.clientHeight;\n      var margin = 50; // w = (w-margin - margin)/(this.max_lat-this.min_lat + 0.001)*(lat-this.min_lat) + margin;\n      // h = h - ( (h-margin - margin)/(this.max_lng-this.min_lng + 0.001)*(lng-this.min_lng) + margin ) ;\n\n      w = (w - margin - margin) / (this.max_lng - this.min_lng + 0.001) * (lng - this.min_lng) + margin;\n      h = h - ((h - margin - margin) / (this.max_lat - this.min_lat + 0.001) * (lat - this.min_lat) + margin);\n      return [w, h];\n    }\n  }, {\n    key: \"renderNode\",\n    value: function renderNode() {\n      var _this3 = this;\n\n      var nodes = this.props.node;\n      var svg = nodes.map(function (node) {\n        var _this3$clcCoordinate = _this3.clcCoordinate(node.lng, node.lat),\n            _this3$clcCoordinate2 = _slicedToArray(_this3$clcCoordinate, 2),\n            x = _this3$clcCoordinate2[0],\n            y = _this3$clcCoordinate2[1];\n\n        var name = node.name;\n\n        var setSE = _this3.setSE.bind(_this3);\n\n        var color = null;\n\n        if (_this3.state.start === node.name) {\n          color = \"#CCFFFF\";\n        } else if (_this3.state.end === node.name) {\n          color = \"#CC6699\";\n        }\n\n        if (_this3.state.S_NODE.has(node.name)) {\n          color = _this3.state.S_NODE.get(node.name);\n        }\n\n        var data = {\n          name: name,\n          x: x,\n          y: y,\n          setSE: setSE,\n          color: color\n        }; //把data作为属性传递给Node\n\n        return React.createElement(Node, Object.assign({\n          key: \"node\" + node.name\n        }, data, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 148\n          },\n          __self: this\n        })); //Node类在此脚本末尾！\n        //react利用key来识别组件，它是一种身份标识标识,与props中的属性不同！！！\n      });\n      return svg;\n    }\n  }, {\n    key: \"renderLink\",\n    value: function renderLink() {\n      var _this4 = this;\n\n      var links = this.props.link;\n      var svg = links.map(function (link) {\n        if (!link.polyline.isVisible()) return;\n\n        var _this4$clcCoordinate = _this4.clcCoordinate(link.node1.lng, link.node1.lat),\n            _this4$clcCoordinate2 = _slicedToArray(_this4$clcCoordinate, 2),\n            x1 = _this4$clcCoordinate2[0],\n            y1 = _this4$clcCoordinate2[1];\n\n        var _this4$clcCoordinate3 = _this4.clcCoordinate(link.node2.lng, link.node2.lat),\n            _this4$clcCoordinate4 = _slicedToArray(_this4$clcCoordinate3, 2),\n            x2 = _this4$clcCoordinate4[0],\n            y2 = _this4$clcCoordinate4[1];\n\n        var s = {\n          name: link.node1.name,\n          x: x1,\n          y: y1\n        };\n        var e = {\n          name: link.node2.name,\n          x: x2,\n          y: y2\n        };\n        var color = link.polyline.getStrokeColor();\n        var dis = link.dis; //边的长度\n\n        console.log(color, link);\n        return React.createElement(Link, {\n          key: \"link-\" + s.name + \"-\" + e.name,\n          from: s.name,\n          to: e.name,\n          x1: s.x,\n          y1: s.y,\n          x2: e.x,\n          y2: e.y,\n          color: color,\n          distance: dis,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 173\n          },\n          __self: this\n        });\n      });\n      return svg;\n    }\n  }, {\n    key: \"changeSpeed\",\n    value: function changeSpeed(event) {\n      var p = (event.clientX - this.getLeft(event.target)) / event.target.clientWidth;\n      console.log(p);\n      this.setState({\n        speed: p\n      });\n    }\n  }, {\n    key: \"play\",\n    value: function play(event) {\n      if (this.state.play === \"stop\") {\n        this.setState({\n          play: \"play\"\n        });\n        this.resetColor();\n        clearTimeout(window.timer);\n        this.go(); //go()包含了初始化以及animate\n      } else if (this.state.play === \"pause\") {\n        this.setState({\n          play: \"play\"\n        });\n        this.animate(); //继续执行\n      } else if (this.state.play === \"play\") {\n        this.setState({\n          play: \"pause\"\n        });\n        clearTimeout(window.timer); //暂停,取消计时器他就不再执行（但是所有状态都保存着<最重要是STEP_COUNT>，下次继续animate即可继续执行）\n      }\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      clearTimeout(window.timer);\n      actionStep.STEP_COUNT = 1;\n      this.setState({\n        play: \"stop\",\n        start: \"\",\n        end: \"\",\n        S_NODE: new Map(),\n        S_EDGE: new Map()\n      });\n      /* global layer */\n\n      layer.msg(\"结束\");\n    } //执行（包括数据传递给C++以及根据C++回传数据显示），会调用animate\n\n  }, {\n    key: \"go\",\n    value: function go() {\n      var _this5 = this;\n\n      if (!this.state.start || !this.state.end) {\n        return this.stop();\n      }\n\n      ;\n      var that = this; //this对象在程序中随时会改变，而var that=this之后，that没改变之前仍然是指向当时的this，这样就不会出现找不到原来的对象。\n\n      var edgeIn = [];\n      var pointIn = [];\n      var globalIn = [];\n      _name = []; //存储点的名字\n\n      this.props.node.forEach(function (node) {\n        //提取每个点的经度、维度、编号并存储在pointIn中(C++程序需要输入的点信息)\n        _name.push(node.name);\n\n        var lng = parseInt(node.lng);\n        var lat = parseInt(node.lat);\n        var index = '*' + (_name.length - 1) + '*';\n        pointIn.push([index, lng, lat]);\n      });\n      var start_index = '*' + _name.findIndex(function (v) {\n        return v === _this5.state.start;\n      }) + '*'; //找到起点、终点的编号\n\n      var end_index = '*' + _name.findIndex(function (v) {\n        return v === _this5.state.end;\n      }) + '*';\n      globalIn.push([pointIn.length]); //globalIn代表C++程序输入的参数：点数、？\n\n      pointIn = JSON.stringify(pointIn);\n      globalIn.push([-1000, 1000]);\n      globalIn.push([1000, -1000]);\n      globalIn = JSON.stringify(globalIn);\n      that.resetColor();\n      var S_NODE = new Map();\n      var S_EDGE = new Map();\n      this.setState({\n        S_NODE: S_NODE,\n        S_EDGE: S_EDGE\n      }); //向 setState() 中传入一个对象来对已有的 state 进行更新。\n\n      this.props.link.forEach(function (link) {\n        //整理edgeIn(编号、编号、距离),作为C++程序传入参数\n        if (!link.polyline.isVisible()) return;\n        var n1 = '*' + _name.findIndex(function (v) {\n          return v === link.node1.name;\n        }) + '*';\n        var n2 = '*' + _name.findIndex(function (v) {\n          return v === link.node2.name;\n        }) + '*';\n        edgeIn.push([n1, n2, parseInt(link.dis, 10)]);\n      });\n      edgeIn = JSON.stringify(edgeIn); //////////////////////////////////////////////////////\n\n      window.layer.load(1, {\n        shade: [0.4, '#fff']\n      });\n      $.ajax({\n        type: \"POST\",\n        url: \"http://localhost:3001/data\",\n        data: {\n          edgeIn: edgeIn,\n          pointIn: pointIn,\n          globalIn: globalIn,\n          sName: start_index,\n          eName: end_index,\n          algo: window.algo\n        },\n        success: function success(json) {\n          //console.log(_name);\n          //console.log({start_index, end_index});\n          //console.log(json);\n          // //stepData包括code、steps\n          stepData = json; //steps的数据是各个动作的含义，比如：\tchangeNodeColor(2,RGB(255,0,0))\tAnimation\t8\n\n          layer.closeAll(); //stepData是C++计算传回的数据,根据stepData,前端做出相应动作\n          // 开始动画\n\n          that.animate(); //不能用this，因为ajax中的this已经不在代表外面的组件了!!!\n        },\n        error: function error() {\n          layer.closeAll();\n          layer.msg(\"出错, 提交失败\");\n        }\n      }); //////////////////////////////////////////////////////\n      // that.animate();\n    } //执行动画\n    //注意：当Question、showHelp、showCode时，之所以return是为了结束当前函数，不再执行当前函数末尾的animate\n    //因为在else if中会使用layer，内部接着使用了setTimeout和animate继续下去\n\n  }, {\n    key: \"animate\",\n    value: function animate() {\n      var _this6 = this;\n\n      // if(this.state.play!==\"play\")return;\n      //setTimeout(code,millisec), code是要执行的代码，lillisec是遇到setTimer后要等待多少毫秒才执行code!\n      //返回数值id，整型，可用于 取消 setTimeout 设置的函数clearTimeout(id)。也就是这个setTimeout的唯一标示符\n      window.timer = setTimeout(function () {\n        var step = _this6.getStep(actionStep); //获取一帧的全部数据\n\n\n        layer.closeAll();\n        actionStep.STEP_COUNT++;\n\n        if (step === null) {\n          _this6.stop();\n\n          return;\n        }\n\n        for (var i = 0; i < step.types.length; i++) {\n          if (step.types[i] === \"changeEdgeColor\") {\n            (function () {\n              var params = step.info[1].split(\"(\")[1].split(\",\");\n              params.pop();\n              var color = step.info[1].split(\"RGB\")[1];\n              color = _this6.chooseColor(color); //改变边的颜色\n\n              var name1 = _name[parseInt(params[0])];\n\n              var name2 = _name[parseInt(params[1])];\n\n              var links = _this6.props.link;\n              links.forEach(function (link) {\n                if (link.polyline.isVisible()) {\n                  if (link.node1.name === name1 && link.node2.name === name2 || link.node1.name === name2 && link.node2.name === name1) {\n                    link.polyline.setStrokeColor(color);\n                  }\n                }\n              });\n\n              _this6.props.updateState(null, links);\n            })();\n          }\n        }\n\n        if (step.type === \"changeEdgeColor\") {\n          var params = step.info[1].split(\"(\")[1].split(\",\");\n          params.pop();\n          var color = step.info[1].split(\"RGB\")[1];\n          color = _this6.chooseColor(color);\n\n          _this6.changeEdgeColor(parseInt(params[0]), parseInt(params[1]), color);\n        } else if (step.type === \"changeNodeColor\") {\n          var idx = step.info[1].split(\"(\")[1].split(\",\")[0];\n          idx = parseInt(idx);\n          var _color = step.info[1].split(\"RGB\")[1];\n          _color = _this6.chooseColor(_color);\n\n          _this6.changeNodeColor(idx, _color);\n        } else if (step.type === \"Question\" && window.question) {\n          var que = step.info[2];\n          var ans = step.info[3];\n\n          if (ans[0] === \"*\") {\n            ans = ans.replace(/\\*/g, \"\");\n            ans = _name[ans];\n          }\n\n          return _this6.ask(que, ans);\n        } else if (step.type === \"showHelp\") {\n          var msg = step.info[1].split(\"(\")[1].split(\")\")[0];\n          layer.msg(msg, {\n            time: 3000\n          });\n          return setTimeout(function () {\n            _this6.animate();\n          }, 3200);\n        } else if (step.type === \"showCode\") {\n          var _msg = step.info[1].split(\"(\")[1].split(\")\")[0];\n          _msg = parseInt(_msg, 10);\n          return _this6.showCode(_msg);\n        }\n\n        _this6.animate(); //重复执行\n\n      }, this.state.speed * 1000 + 70);\n    } //学长原来是获取每一个动作信息－>此处改为获取每一个步骤(帧)的信息\n\n  }, {\n    key: \"getStep\",\n    value: function getStep(actionStep) {\n      console.log(\"get step:\" + actionStep.STEP_COUNT); //读取一帧的数据\n\n      var stepTemp = stepData.steps[actionStep.ACTION_COUNT].split('\\t')[3]; //得到帧的编号\n\n      var types = new Array(); //创建数组，用于保存动作信息\n\n      var infos = new Array();\n\n      while (actionStep.STEP_COUNT == stepTemp) {\n        //读取一个动作\n        console.log(\"get action: \" + actionStep.ACTION_COUNT);\n        if (!Array.isArray(stepData.steps)) return null;\n        if (stepData.steps.length <= actionStep.ACTION_COUNT) return null;\n        var info = stepData.steps[actionStep.ACTION_COUNT].split('\\t'); //第ACTION_COUNT条动作信息(作为数组保存在info)\n        //if(info==\"\")return null;                   \n\n        var type = info[1].split('(')[0]; //info[1]代表动作的解释：changeNodeColor(4,RGB(91,155,213))；  则type对应changeNodeColor\n\n        types.push(type);\n        infos.push(info);\n        actionStep.ACTION_COUNT++;\n        stepTemp = stepData.steps[actionStep.ACTION_COUNT].split('\\t')[3]; //得到帧的编号\n\n        if (stepData.steps[actionStep.ACTION_COUNT].split('\\t')[1].split('(')[0] === \"Question\") {\n          //question动作的帧编号位置不同!\n          stepTemp = stepData.steps[actionStep.ACTION_COUNT].split('\\t')[7];\n        }\n      }\n\n      return {\n        types: types,\n        infos: infos\n      }; //返回对象，对象的属性是键值对\n    }\n  }, {\n    key: \"chooseColor\",\n    value: function chooseColor(color) {\n      switch (color) {\n        case \"(10,10,10))\":\n          return this.INITIAL_LINK_COLOR;\n        //初始化边（接近黑色）\n\n        case \"(91,155,213))\":\n          return this.INITIAL_NODE_COLOR;\n        //初始化点（接近蓝色)\n\n        case \"(255,0,0))\":\n          return this.SELECTED_LINK_COLOR;\n        //选中点、边（红色）\n\n        default:\n          return \"#000000\";\n      }\n    }\n  }, {\n    key: \"changeNodeColor\",\n    value: function changeNodeColor(idx, color) {\n      var name = _name[idx]; //找到编号对应的点名\n\n      var S_NODE = this.state.S_NODE;\n      S_NODE.set(name, color); //S_NODE是键值对，改变name对应点的状态\n\n      this.setState({\n        S_NODE: S_NODE\n      });\n    }\n  }, {\n    key: \"changeEdgeColor\",\n    value: function changeEdgeColor(idx1, idx2, color) {\n      var name1 = _name[idx1];\n      var name2 = _name[idx2]; //let S_EDGE = this.state.S_EDGE;\n      //S_EDGE.push({name1, name2, color});\n      //this.setState({S_EDGE});\n\n      var links = this.props.link;\n      links.forEach(function (link) {\n        if (link.polyline.isVisible()) {\n          if (link.node1.name === name1 && link.node2.name === name2 || link.node1.name === name2 && link.node2.name === name1) {\n            link.polyline.setStrokeColor(color);\n          }\n        }\n      });\n      this.props.updateState(null, links);\n    }\n  }, {\n    key: \"checkLink\",\n    value: function checkLink(link, name1, name2) {\n      var node1 = link.node1;\n      var node2 = link.node2;\n\n      if (node1.name === name1 && node2.name === name2 || node1.name === name2 && node2.name === name1) {\n        return true;\n      }\n\n      return false;\n    } //重置link颜色\n\n  }, {\n    key: \"resetColor\",\n    value: function resetColor() {\n      var _this7 = this;\n\n      var links = this.props.link;\n      links.forEach(function (link) {\n        if (link.polyline.isVisible()) link.polyline.setStrokeColor(_this7.DEFAULT_LINK_COLOR);\n      });\n      this.props.updateState(null, links);\n    }\n    /*获取元素的横坐标*/\n\n  }, {\n    key: \"getLeft\",\n    value: function getLeft(e) {\n      var offset = e.offsetLeft;\n\n      if (e.offsetParent != null) {\n        offset += this.getLeft(e.offsetParent);\n      }\n\n      return offset;\n    } //设置起点终点\n\n  }, {\n    key: \"setSE\",\n    value: function setSE(event) {\n      event.preventDefault();\n      event.stopPropagation();\n      var that = this;\n      var name = event.target.attributes.id.value.split(\"_\").pop();\n      /*\n      let menu = new nw.Menu();\n      menu.append(new nw.MenuItem({\n      \tlabel: '设为起点',\n      \tclick: function(){\n                    that.setState({start: name});\n      \t}\n      }));\n      menu.append(new nw.MenuItem({\n      \tlabel: '设为终点',\n      \tclick: function(){\n                    that.setState({end: name});\n      \t}\n      }));\n      menu.popup(event.clientX, event.clientY);*/\n\n      var menu = new MyMenu(\"MyMenu_Node_SVG\");\n      menu.append([{\n        label: '设为起点',\n        click: function click() {\n          that.setState({\n            start: name\n          });\n        }\n      }, {\n        label: '设为终点',\n        click: function click() {\n          that.setState({\n            end: name\n          });\n        }\n      }]);\n      menu.popup(event.clientX, event.clientY);\n      return false;\n    } //提问\n\n  }, {\n    key: \"ask\",\n    value: function ask(que, msg) {\n      clearTimeout(window.timer);\n      var that = this;\n      window.layer.prompt({\n        title: que\n      }, function (text, index) {\n        layer.closeAll();\n\n        if (text != msg) {\n          window.layer.msg('正确答案：' + msg, {\n            time: 1000\n          }); ///////////////////////////////////////////////////////\n\n          $.ajax({\n            type: \"POST\",\n            url: \"/collect\",\n            data: {\n              que: que,\n              ans: text,\n              msg: msg\n            },\n            success: function success(json) {},\n            error: function error() {}\n          }); ///////////////////////////////////////////////////////\n\n          setTimeout(function () {\n            that.animate();\n          }, 1100);\n        } else {\n          that.animate();\n        }\n      });\n    }\n  }, {\n    key: \"showCode\",\n    value: function showCode(msg) {\n      var content = \"\";\n\n      if (msg === 1) {\n        content = \"\\n        <p style=\\\"white-space:pre-wrap !important; padding: 30px;\\\">    void DFS(Graph& G, int v)\\n        {\\n            <span style=\\\"color: red\\\">visited[v] = 1;\\t</span>\\n            for (int w = FirstAdjVex(G, v); w != -1; w = NextAdjVex(G, v, w))\\n            {\\n                if (!visited[w])\\n                {\\n                    DFS(G, w);\\n                }\\n            }\\n        }</p>\\n            \";\n      } else if (msg === 2) {\n        content = \"\\n        <p style=\\\"white-space:pre-wrap !important; padding: 30px;\\\">    void DFS(Graph& G, int v)\\n        {\\n            visited[v] = 1;\\t\\n            <span style=\\\"color: red\\\">for (int w = FirstAdjVex(G, v); w != -1; w = NextAdjVex(G, v, w))\\n            {\\n                if (!visited[w])\\n                {\\n                    DFS(G, w);\\n                }\\n            }</span>\\n        }</p>\\n            \";\n      }\n\n      var that = this; //页面层\n\n      window.layer.open({\n        type: 1,\n        area: ['800px', '400px'],\n        //宽高\n        content: content,\n        closeBtn: false,\n        title: '提示',\n        btn: '关闭',\n        yes: function yes() {\n          layer.closeAll();\n          that.animate();\n        }\n      });\n    } //****************************************************dd by cdz\n    //执行动作：根据STEP_COUNT执行！！！\n    //注意：当Question、showHelp、showCode时，之所以return是为了结束当前函数，不再执行当前函数末尾的animate\n    //因为在else if中会使用layer，内部接着使用了setTimeout和animate继续下去\n\n  }, {\n    key: \"frame_animate\",\n    value: function frame_animate() {\n      var _this8 = this;\n\n      // if(this.state.play!==\"play\")return;\n      //setTimeout(code,millisec), code是要执行的代码，lillisec是遇到setTimer后要等待多少毫秒才执行code!\n      //返回数值id，整型，可用于 取消 setTimeout 设置的函数clearTimeout(id)。也就是这个setTimeout的唯一标示符\n      window.timer = setTimeout(function () {\n        var step = _this8.getStep(actionStep); //获得每一步动作的数据(从类变量stepData中获得),包括type、info\n\n\n        layer.closeAll();\n        actionStep.STEP_COUNT++;\n\n        if (step === null) {\n          _this8.stop();\n\n          return;\n        }\n\n        if (step.type === \"changeEdgeColor\") {\n          var params = step.info[1].split(\"(\")[1].split(\",\");\n          params.pop();\n          var color = step.info[1].split(\"RGB\")[1];\n          color = _this8.chooseColor(color);\n\n          _this8.changeEdgeColor(parseInt(params[0]), parseInt(params[1]), color);\n        } else if (step.type === \"changeNodeColor\") {\n          var idx = step.info[1].split(\"(\")[1].split(\",\")[0];\n          idx = parseInt(idx);\n          var _color2 = step.info[1].split(\"RGB\")[1];\n          _color2 = _this8.chooseColor(_color2);\n\n          _this8.changeNodeColor(idx, _color2);\n        } else if (step.type === \"Question\" && window.question) {\n          var que = step.info[2];\n          var ans = step.info[3];\n\n          if (ans[0] === \"*\") {\n            ans = ans.replace(/\\*/g, \"\");\n            ans = _name[ans];\n          }\n\n          return _this8.ask(que, ans);\n        } else if (step.type === \"showHelp\") {\n          var msg = step.info[1].split(\"(\")[1].split(\")\")[0];\n          layer.msg(msg, {\n            time: 3000\n          });\n          return setTimeout(function () {\n            _this8.animate();\n          }, 3200);\n        } else if (step.type === \"showCode\") {\n          var _msg2 = step.info[1].split(\"(\")[1].split(\")\")[0];\n          _msg2 = parseInt(_msg2, 10);\n          return _this8.showCode(_msg2);\n        }\n\n        _this8.animate(); //重复执行\n\n      }, this.state.speed * 1000 + 70);\n    } //倒退:为了减少不必要的理解错误，只能倒退到点和边初始化完成以后\n\n  }, {\n    key: \"animate_stepback\",\n    value: function animate_stepback() {\n      //不管处于什么状态，都使其暂停\n      this.setState({\n        play: \"pause\"\n      });\n      clearTimeout(window.timer);\n      layer.closeAll();\n      actionStep.STEP_COUNT--;\n      var back_step = this.getStep(actionStep);\n\n      if (back_step === null) {\n        this.stop();\n        return;\n      }\n\n      if (back_step.type === \"changeEdgeColor\") {\n        var params = back_step.info[1].split(\"(\")[1].split(\",\");\n        params.pop();\n        var color = back_step.info[1].split(\"RGB\")[1];\n        color = this.chooseColor(color);\n        if (color == this.SELECTED_LINK_COLOR) //只对已选中的边进行改变,变为初始化后的样子\n          this.changeEdgeColor(parseInt(params[0]), parseInt(params[1]), this.INITIAL_LINK_COLOR);\n      } else if (back_step.type === \"changeNodeColor\") {\n        var idx = back_step.info[1].split(\"(\")[1].split(\",\")[0];\n        idx = parseInt(idx);\n        var _color3 = back_step.info[1].split(\"RGB\")[1];\n        _color3 = this.chooseColor(_color3);\n        if (_color3 == this.SELECTED_NODE_COLOR) //将选中的点改为初始化后的样子\n          this.changeNodeColor(idx, this.INITIAL_NODE_COLOR);\n      } else if (back_step.type === \"Question\" && window.question) {\n        var que = back_step.info[2];\n        var ans = back_step.info[3];\n\n        if (ans[0] === \"*\") {\n          ans = ans.replace(/\\*/g, \"\");\n          ans = _name[ans];\n        } //修改ask函数\n\n\n        var that = this;\n        window.layer.prompt({\n          title: que\n        }, function (text, index) {\n          layer.closeAll();\n\n          if (text != ans) {\n            window.layer.msg('正确答案：' + ans, {\n              time: 3000000\n            }); //驻留在该帧\n          }\n        });\n      } else if (back_step.type === \"showHelp\") {\n        var msg = back_step.info[1].split(\"(\")[1].split(\")\")[0];\n        layer.msg(msg, {\n          time: 3000000\n        }); //驻留在该帧\n      } else if (back_step.type === \"showCode\") {\n        var _msg3 = back_step.info[1].split(\"(\")[1].split(\")\")[0];\n        _msg3 = parseInt(_msg3, 10);\n        var content = \"\";\n\n        if (_msg3 === 1) {\n          content = \"\\n        <p style=\\\"white-space:pre-wrap !important; padding: 30px;\\\">    void DFS(Graph& G, int v)\\n        {\\n            <span style=\\\"color: red\\\">visited[v] = 1;\\t</span>\\n            for (int w = FirstAdjVex(G, v); w != -1; w = NextAdjVex(G, v, w))\\n            {\\n                if (!visited[w])\\n                {\\n                    DFS(G, w);\\n                }\\n            }\\n        }</p>\\n            \";\n        } else if (_msg3 === 2) {\n          content = \"\\n        <p style=\\\"white-space:pre-wrap !important; padding: 30px;\\\">    void DFS(Graph& G, int v)\\n        {\\n            visited[v] = 1;\\t\\n            <span style=\\\"color: red\\\">for (int w = FirstAdjVex(G, v); w != -1; w = NextAdjVex(G, v, w))\\n            {\\n                if (!visited[w])\\n                {\\n                    DFS(G, w);\\n                }\\n            }</span>\\n        }</p>\\n            \";\n        }\n\n        var _that = this; //页面层\n\n\n        window.layer.open({\n          type: 1,\n          area: ['800px', '400px'],\n          //宽高\n          content: content,\n          closeBtn: false,\n          title: '提示',\n          btn: '关闭',\n          yes: function yes() {\n            layer.closeAll();\n          }\n        });\n      }\n    } //前进\n\n  }, {\n    key: \"animate_stepforward\",\n    value: function animate_stepforward() {\n      //不管处于什么状态，都使其暂停\n      this.setState({\n        play: \"pause\"\n      });\n      clearTimeout(window.timer);\n      layer.closeAll();\n      actionStep.STEP_COUNT++;\n      var forward_step = this.getStep(actionStep);\n\n      if (forward_step === null) {\n        this.stop();\n        return;\n      }\n\n      if (forward_step.type === \"changeEdgeColor\") {\n        var params = forward_step.info[1].split(\"(\")[1].split(\",\");\n        params.pop();\n        var color = forward_step.info[1].split(\"RGB\")[1];\n        color = this.chooseColor(color);\n        this.changeEdgeColor(parseInt(params[0]), parseInt(params[1]), color);\n      } else if (forward_step.type === \"changeNodeColor\") {\n        var idx = forward_step.info[1].split(\"(\")[1].split(\",\")[0];\n        idx = parseInt(idx);\n        var _color4 = forward_step.info[1].split(\"RGB\")[1];\n        _color4 = this.chooseColor(_color4);\n        this.changeNodeColor(idx, _color4);\n      } else if (forward_step.type === \"Question\" && window.question) {\n        var que = forward_step.info[2];\n        var ans = forward_step.info[3];\n\n        if (ans[0] === \"*\") {\n          ans = ans.replace(/\\*/g, \"\");\n          ans = _name[ans];\n        } //修改ask函数\n\n\n        var that = this;\n        window.layer.prompt({\n          title: que\n        }, function (text, index) {\n          layer.closeAll();\n\n          if (text != ans) {\n            window.layer.msg('正确答案：' + ans, {\n              time: 3000000\n            }); //驻留在该帧\n          }\n        });\n      } else if (forward_step.type === \"showHelp\") {\n        var msg = forward_step.info[1].split(\"(\")[1].split(\")\")[0];\n        layer.msg(msg, {\n          time: 3000000\n        }); //驻留在该帧\n      } else if (forward_step.type === \"showCode\") {\n        var _msg4 = forward_step.info[1].split(\"(\")[1].split(\")\")[0];\n        _msg4 = parseInt(_msg4, 10);\n        var content = \"\";\n\n        if (_msg4 === 1) {\n          content = \"\\n        <p style=\\\"white-space:pre-wrap !important; padding: 30px;\\\">    void DFS(Graph& G, int v)\\n        {\\n            <span style=\\\"color: red\\\">visited[v] = 1;\\t</span>\\n            for (int w = FirstAdjVex(G, v); w != -1; w = NextAdjVex(G, v, w))\\n            {\\n                if (!visited[w])\\n                {\\n                    DFS(G, w);\\n                }\\n            }\\n        }</p>\\n            \";\n        } else if (_msg4 === 2) {\n          content = \"\\n        <p style=\\\"white-space:pre-wrap !important; padding: 30px;\\\">    void DFS(Graph& G, int v)\\n        {\\n            visited[v] = 1;\\t\\n            <span style=\\\"color: red\\\">for (int w = FirstAdjVex(G, v); w != -1; w = NextAdjVex(G, v, w))\\n            {\\n                if (!visited[w])\\n                {\\n                    DFS(G, w);\\n                }\\n            }</span>\\n        }</p>\\n            \";\n        }\n\n        var _that2 = this; //页面层\n\n\n        window.layer.open({\n          type: 1,\n          area: ['800px', '400px'],\n          //宽高\n          content: content,\n          closeBtn: false,\n          title: '提示',\n          btn: '关闭',\n          yes: function yes() {\n            layer.closeAll();\n          }\n        });\n      }\n    }\n  }]);\n\n  return GraphSVG;\n}(React.Component);\n\nvar Node =\n/*#__PURE__*/\nfunction (_React$Component2) {\n  _inherits(Node, _React$Component2);\n\n  function Node(props) {\n    var _this9;\n\n    _classCallCheck(this, Node);\n\n    _this9 = _possibleConstructorReturn(this, _getPrototypeOf(Node).call(this, props));\n    _this9.SELECT_COLOR = \"#300\";\n    _this9.DEFAULT_COLOR = \"#3C9\";\n    return _this9;\n  } //<g>元素通常用来对相关图形元素进行分组\n  //onContextMenu：对应右击鼠标的响应事件\n\n\n  _createClass(Node, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"g\", {\n        id: \"node_\" + this.props.name,\n        onContextMenu: this.props.setSE,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 845\n        },\n        __self: this\n      }, React.createElement(\"circle\", {\n        id: \"node_circle_\" + this.props.name,\n        cx: this.props.x,\n        cy: this.props.y,\n        r: this.props.r || 20,\n        fill: this.props.color || this.DEFAULT_COLOR,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 846\n        },\n        __self: this\n      }), React.createElement(\"text\", {\n        id: \"node_text_\" + this.props.name,\n        x: this.props.x,\n        y: this.props.y,\n        fill: \"black\",\n        textAnchor: \"middle\",\n        dominantBaseline: \"middle\",\n        style: {\n          fontSize: \"14px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 847\n        },\n        __self: this\n      }, this.props.hide || this.props.name), React.createElement(\"text\", {\n        id: \"node_value\" + this.props.name,\n        x: this.props.x,\n        y: this.props.y + 10,\n        fill: \"black\",\n        textAnchor: \"middle\",\n        dominantBaseline: \"middle\",\n        style: {\n          fontSize: \"14px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 848\n        },\n        __self: this\n      }, \"1234\"));\n    }\n  }, {\n    key: \"hover\",\n    value: function hover(event) {\n      console.log(event.target.attributes.fill);\n      console.log(event.target.attributes);\n      var attributes = event.target.attributes;\n    }\n  }]);\n\n  return Node;\n}(React.Component);\n\nvar Link =\n/*#__PURE__*/\nfunction (_React$Component3) {\n  _inherits(Link, _React$Component3);\n\n  function Link(props) {\n    var _this10;\n\n    _classCallCheck(this, Link);\n\n    _this10 = _possibleConstructorReturn(this, _getPrototypeOf(Link).call(this, props));\n    _this10.SELECT_COLOR = \"#900\";\n    _this10.DEFAULT_COLOR = _this10.props.color;\n    return _this10;\n  }\n\n  _createClass(Link, [{\n    key: \"render\",\n    value: function render() {\n      this.DEFAULT_COLOR = this.props.color;\n      if (window.showDis) //需要显示距离时返回(dijkstra)\n        return React.createElement(\"g\", {\n          id: \"link_\" + this.props.from + \"_\" + this.props.to,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 870\n          },\n          __self: this\n        }, React.createElement(\"line\", {\n          x1: this.props.x1,\n          y1: this.props.y1,\n          x2: this.props.x2,\n          y2: this.props.y2,\n          stroke: this.props.color,\n          strokeWidth: \"5\",\n          style: {\n            cursor: \"pointer\"\n          },\n          onMouseEnter: this.hover.bind(this),\n          onMouseLeave: this.hover.bind(this),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 871\n          },\n          __self: this\n        }), React.createElement(\"text\", {\n          x: (this.props.x1 + this.props.x2) / 2,\n          y: (this.props.y1 + this.props.y2) / 2,\n          style: {\n            fontSize: \"15px\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 872\n          },\n          __self: this\n        }, this.props.distance));else return React.createElement(\"g\", {\n        id: \"link_\" + this.props.from + \"_\" + this.props.to,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 877\n        },\n        __self: this\n      }, React.createElement(\"line\", {\n        x1: this.props.x1,\n        y1: this.props.y1,\n        x2: this.props.x2,\n        y2: this.props.y2,\n        stroke: this.props.color,\n        strokeWidth: \"5\",\n        style: {\n          cursor: \"pointer\"\n        },\n        onMouseEnter: this.hover.bind(this),\n        onMouseLeave: this.hover.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 878\n        },\n        __self: this\n      }));\n    }\n  }, {\n    key: \"hover\",\n    value: function hover(event) {\n      var attributes = event.target.attributes;\n      attributes.stroke.value === this.SELECT_COLOR ? attributes.stroke.value = this.DEFAULT_COLOR : attributes.stroke.value = this.SELECT_COLOR;\n    }\n  }]);\n\n  return Link;\n}(React.Component);\n\nexport default GraphSVG;","map":{"version":3,"sources":["/home/cdz/Code/FrontEnd/nw-react/src/app/component/GraphSVG.js"],"names":["Graph","MyMenu","assertFunctionParent","require","React","$","window","jQuery","stepData","_name","actionStep","Object","STEP_COUNT","ACTION_COUNT","question","GraphSVG","props","state","DEFAULT_LINK_COLOR","INITIAL_LINK_COLOR","INITIAL_NODE_COLOR","SELECTED_LINK_COLOR","SELECTED_NODE_COLOR","path","speed","play","start","end","S_NODE","Map","S_EDGE","clcMaxMin","nodes","renderNode","links","renderLink","controlstate","width","height","backgroundColor","e","preventDefault","checkChange","bind","changeSpeed","animate_stepback","animate_stepforward","stop","target","checked","console","log","setState","max_lng","Infinity","min_lng","max_lat","min_lat","mid_lng","mid_lat","node","forEach","lat","lng","length","w","refs","graph","clientWidth","h","clientHeight","margin","svg","map","clcCoordinate","x","y","name","setSE","color","has","get","data","link","polyline","isVisible","node1","x1","y1","node2","x2","y2","s","getStrokeColor","dis","event","p","clientX","getLeft","resetColor","clearTimeout","timer","go","animate","layer","msg","that","edgeIn","pointIn","globalIn","push","parseInt","index","start_index","findIndex","v","end_index","JSON","stringify","n1","n2","load","shade","ajax","type","url","sName","eName","algo","success","json","closeAll","error","setTimeout","step","getStep","i","types","params","info","split","pop","chooseColor","name1","name2","setStrokeColor","updateState","changeEdgeColor","idx","changeNodeColor","que","ans","replace","ask","time","showCode","stepTemp","steps","Array","infos","isArray","set","idx1","idx2","offset","offsetLeft","offsetParent","stopPropagation","attributes","id","value","menu","append","label","click","popup","clientY","prompt","title","text","content","open","area","closeBtn","btn","yes","back_step","forward_step","Component","Node","SELECT_COLOR","DEFAULT_COLOR","r","fontSize","hide","fill","Link","showDis","from","to","cursor","hover","distance","stroke"],"mappings":"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","sourcesContent":["//import d3 from './d3.v4.min.js';\n//window.d3 = d3;\n//import $ from 'jquery';  //引入jquery\nimport Graph from \"./Graph.js\";\nimport MyMenu from \"../MyMenu.js\";\nimport { assertFunctionParent } from \"babel-types\";\n\nrequire('../../assets/play.png');\nrequire('../../assets/pause.png');\nlet React = require('react');\n\n//import stepData from \"./testData.js\";\nlet $=window.jQuery;\nlet stepData = null;\nlet _name = [];     //存储点名\n//let STEP_COUNT = 0;　　　//学长以STEP_COUNT记录每一个动作的编号（是动作不是帧！！）->改为每一帧的编号\nlet actionStep=new Object();  //采用对象，是为了进行action_count的引用传递\nactionStep.STEP_COUNT=1; //帧从１开始计数（只是为了符合动作表的第四个字段）\nactionStep.ACTION_COUNT=0;\nwindow.question = true;\n\nclass GraphSVG extends React.Component{\n    //其属性来自Panel...this.pros的传递,包括updtaState、node、link\n    constructor(props){\n        super(props);\n        this.state = {};\n\n        //注意：关于点、边的颜色\n        //ＤＦＳ后台传递的颜色：初始化边表示（１０，１０，１０），初始点表示(91,155,2１3),选中点边表示（255,0,0）\n        //DJ后台传递颜色:初始化边（１０，１０，１０），初始化点（９１，１５５，２１３），\n\n        this.DEFAULT_LINK_COLOR = \"#3a6bdb\";  //默认是(浅蓝色)\n        this.INITIAL_LINK_COLOR = \"#0a0a0a\";   //初始化后边的颜色\n        this.INITIAL_NODE_COLOR = \"#5B9BD5\";  //初始化后点的颜色\n        this.SELECTED_LINK_COLOR = \"#ff0000\";   //选中的边，红色\n        this.SELECTED_NODE_COLOR = \"#ff0000\";   //选中的点     \n       \n        this.path = null;\n\n        this.state.speed = 0.5;\n        this.state.play = \"stop\";\n        this.state.start = \"\";\n        this.state.end = \"\";\n        this.state.S_NODE = new Map(); //Map是一组键值对的结构，具有极快的查找速度(误以为是Map.js导出的Map类)\n        this.state.S_EDGE = new Map();\n        this.state.question= true;\n    }\n    render(){\n        this.clcMaxMin();\n        let nodes = this.renderNode();\n        let links = this.renderLink();\n\n        let controlstate = this.state.play===\"play\"?\"pauseState\":\"playState\";\n\n        return (\n            <div id=\"graphWrap\">\n                <div id=\"main\">\n                    <div style={{width:\"100%\", height:\"100%\", backgroundColor:\"#FFF\"}}>\n                        <svg ref=\"graph\" width=\"100%\" height=\"100%\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" onContextMenu={(e)=>{e.preventDefault();}}>\n                            {links}\n                            {nodes}\n                        </svg>\n                    </div>\n                </div>\n                <div id=\"tool\">\n                    <div id=\"question\"> 提问 <input id=\"question_checkbox\" type=\"checkbox\" checked={this.state.question} onChange={this.checkChange.bind(this)}/> </div>\n                    <div id=\"speed\" title=\"速度\" onClick={this.changeSpeed.bind(this)}>\n                        <div id=\"speedValue\" style={{width: this.state.speed*100+\"%\"}}></div>\n                    </div>\n                    <div id=\"prev\" title=\"上一步\" onClick={this.animate_stepback.bind(this)}></div>\n                    <div id=\"start\" title=\"开始/暂停\" className={controlstate} onClick={this.play.bind(this)}></div>\n                    <div id=\"next\" title=\"下一步\" onClick={this.animate_stepforward.bind(this)}></div>\n                    <div id=\"end\" title=\"结束\" onClick={this.stop.bind(this)}></div>\n                </div>\n            </div>\n        );\n    }\n\n    //是否提问状态改变\n    checkChange(e){\n        window.question = e.target.checked;\n        console.log(window.question);\n        this.setState({question: !this.state.question});\n    }\n\n    clcMaxMin(){\n        let max_lng = -Infinity, min_lng = Infinity;\n        let max_lat = -Infinity, min_lat = Infinity;\n\n        this.mid_lng = 0;\n        this.mid_lat = 0;\n\n        this.props.node.forEach(node=>{\n            if(node.lat>max_lat)max_lat = node.lat;\n            if(node.lat<min_lat)min_lat = node.lat;\n\n            if(node.lng>max_lng)max_lng = node.lng;\n            if(node.lng<min_lng)min_lng = node.lng;\n            \n            this.mid_lng += node.lng;\n            this.mid_lat += node.lat;\n        });\n\n        this.max_lng = max_lng;\n        this.min_lng = min_lng;\n\n        this.max_lat = max_lat;\n        this.min_lat = min_lat;\n\n        this.mid_lng /= this.props.node.length;\n        this.mid_lat /= this.props.node.length;\n    }\n\n    clcCoordinate(lng, lat){\n        let w = this.refs.graph.clientWidth;\n        let h = this.refs.graph.clientHeight;\n\n        let margin = 50;\n\n        // w = (w-margin - margin)/(this.max_lat-this.min_lat + 0.001)*(lat-this.min_lat) + margin;\n        // h = h - ( (h-margin - margin)/(this.max_lng-this.min_lng + 0.001)*(lng-this.min_lng) + margin ) ;\n\n        w = (w-margin - margin)/(this.max_lng-this.min_lng + 0.001)*(lng-this.min_lng) + margin;\n        h = h - ( (h-margin - margin)/(this.max_lat-this.min_lat + 0.001)*(lat-this.min_lat) + margin ) ;\n\n        return [w, h];\n    }\n\n    renderNode(){\n        let nodes = this.props.node;\n        let svg = nodes.map(node=>{\n            let [x, y] = this.clcCoordinate(node.lng, node.lat);\n            let name = node.name;\n            let setSE = this.setSE.bind(this);\n            let color = null;\n            if(this.state.start===node.name){\n                color = \"#CCFFFF\";\n            }\n            else if(this.state.end===node.name){\n                color = \"#CC6699\";\n            }\n\n            if(this.state.S_NODE.has(node.name)){\n                color = this.state.S_NODE.get(node.name);\n            }\n\n            let data = {name, x, y, setSE, color};   //把data作为属性传递给Node\n            return ( <Node key={\"node\"+node.name} {...data}/> );   //Node类在此脚本末尾！\n            //react利用key来识别组件，它是一种身份标识标识,与props中的属性不同！！！\n        });\n        return svg;\n    }\n\n    renderLink(){\n        let links = this.props.link;\n        let svg = links.map(link=>{\n            if(!link.polyline.isVisible())return;\n            let [x1, y1] = this.clcCoordinate(link.node1.lng, link.node1.lat);\n            let [x2, y2] = this.clcCoordinate(link.node2.lng, link.node2.lat);\n            let s = {\n                name: link.node1.name,\n                x: x1,\n                y: y1,\n            };\n            let e = {\n                name: link.node2.name,\n                x: x2,\n                y: y2,\n            };\n            let color = link.polyline.getStrokeColor();\n            let dis=link.dis;  //边的长度\n            console.log(color, link);\n            return ( <Link key={\"link-\"+s.name+\"-\"+e.name} from={s.name} to={e.name} x1={s.x} y1={s.y} x2={e.x} y2={e.y} color={color} distance={dis}/> );\n        });\n        return svg;\n    }\n\n    changeSpeed(event){\n        let p = (event.clientX - this.getLeft(event.target)) / event.target.clientWidth;\n        console.log(p);\n        this.setState({speed: p});\n    }\n\n    play(event){\n        if(this.state.play===\"stop\"){\n            this.setState({play: \"play\"});\n            this.resetColor();\n            clearTimeout(window.timer);\n            this.go();           //go()包含了初始化以及animate\n            \n        }else if(this.state.play===\"pause\"){\n            this.setState({play: \"play\"});\n            this.animate();     //继续执行\n\n        }else if(this.state.play===\"play\"){\n\n            this.setState({play: \"pause\"});\n            clearTimeout(window.timer);  //暂停,取消计时器他就不再执行（但是所有状态都保存着<最重要是STEP_COUNT>，下次继续animate即可继续执行）\n\n        }\n    }\n\n    stop(){\n        clearTimeout(window.timer);\n        actionStep.STEP_COUNT = 1;\n        this.setState({play: \"stop\", start: \"\", end: \"\", S_NODE:new Map(), S_EDGE: new Map()});\n         /* global layer */\n        layer.msg(\"结束\");\n    }\n\n    //执行（包括数据传递给C++以及根据C++回传数据显示），会调用animate\n    go(){\n        if(!this.state.start || !this.state.end){\n            return this.stop();\n        };\n\n        var that = this;   //this对象在程序中随时会改变，而var that=this之后，that没改变之前仍然是指向当时的this，这样就不会出现找不到原来的对象。\n\n        var edgeIn = [];\n        var pointIn = [];\n        var globalIn = [];\n\n\n        _name = [];       //存储点的名字\n\n        this.props.node.forEach(node=>{  //提取每个点的经度、维度、编号并存储在pointIn中(C++程序需要输入的点信息)\n            _name.push(node.name);\n            let lng = parseInt(node.lng);\n            let lat = parseInt(node.lat);\n            let index = '*'+(_name.length-1)+'*'\n            pointIn.push([index, lng, lat]);\n        });\n\n        var start_index = '*'+(_name.findIndex(v=>v===this.state.start))+'*';  //找到起点、终点的编号\n        var end_index = '*'+(_name.findIndex(v=>v===this.state.end))+'*';\n\n\n        globalIn.push([pointIn.length]);     //globalIn代表C++程序输入的参数：点数、？\n        pointIn = JSON.stringify(pointIn);\n        globalIn.push([-1000, 1000]);\n        globalIn.push([1000, -1000]);\n        globalIn = JSON.stringify(globalIn);\n\n        \n        that.resetColor();\n        let S_NODE = new Map();\n        let S_EDGE = new Map();\n        this.setState({S_NODE, S_EDGE});  //向 setState() 中传入一个对象来对已有的 state 进行更新。\n\n\n        this.props.link.forEach(link=>{        //整理edgeIn(编号、编号、距离),作为C++程序传入参数\n            if(!link.polyline.isVisible())return;\n            let n1 = '*'+_name.findIndex(v=>v===link.node1.name)+'*';\n            let n2 = '*'+_name.findIndex(v=>v===link.node2.name)+'*';\n            edgeIn.push([n1, n2, parseInt(link.dis, 10)]);\n        });\n        edgeIn = JSON.stringify(edgeIn);\n//////////////////////////////////////////////////////\n        window.layer.load(1, {shade: [0.4,'#fff']});\n        $.ajax({\n            type:\"POST\",\n            url:\"http://localhost:3001/data\",\n            data:{edgeIn:edgeIn,pointIn:pointIn,globalIn:globalIn,sName:start_index,eName:end_index,algo:window.algo},\n            success: function(json){\n                //console.log(_name);\n                //console.log({start_index, end_index});\n                //console.log(json);\n                // //stepData包括code、steps\n                stepData = json;  //steps的数据是各个动作的含义，比如：\tchangeNodeColor(2,RGB(255,0,0))\tAnimation\t8\n                layer.closeAll();\n\n                //stepData是C++计算传回的数据,根据stepData,前端做出相应动作\n                // 开始动画\n                that.animate();   //不能用this，因为ajax中的this已经不在代表外面的组件了!!!\n            },\n            error: function(){\n                layer.closeAll();\n                layer.msg(\"出错, 提交失败\");\n            }\n        });\n//////////////////////////////////////////////////////\n\n        // that.animate();\n\n    }\n\n    //执行动画\n    //注意：当Question、showHelp、showCode时，之所以return是为了结束当前函数，不再执行当前函数末尾的animate\n    //因为在else if中会使用layer，内部接着使用了setTimeout和animate继续下去\n    animate(){\n        // if(this.state.play!==\"play\")return;\n        //setTimeout(code,millisec), code是要执行的代码，lillisec是遇到setTimer后要等待多少毫秒才执行code!\n        //返回数值id，整型，可用于 取消 setTimeout 设置的函数clearTimeout(id)。也就是这个setTimeout的唯一标示符\n        window.timer = setTimeout(()=>{\n\n            let step = this.getStep(actionStep);  //获取一帧的全部数据\n            layer.closeAll();\n            actionStep.STEP_COUNT++;\n            if(step===null){\n                this.stop();\n                return;\n            }\n\n            for(var i=0;i<step.types.length;i++){\n                if(step.types[i]===\"changeEdgeColor\"){\n                let params = step.info[1].split(\"(\")[1].split(\",\");\n                params.pop();\n                let color = step.info[1].split(\"RGB\")[1];\n                color = this.chooseColor(color);\n               \n                //改变边的颜色\n                let name1 = _name[parseInt(params[0])];\n                let name2 = _name[parseInt(params[1])];\n                let links = this.props.link;\n                links.forEach(link=>{\n                    if(link.polyline.isVisible()){\n                        if((link.node1.name===name1&&link.node2.name===name2)||(link.node1.name===name2&&link.node2.name===name1)){\n                            link.polyline.setStrokeColor(color);\n                        }\n                    }\n                });\n                this.props.updateState(null, links);\n                        }\n            }\n\n\n\n\n\n            if(step.type===\"changeEdgeColor\"){\n                let params = step.info[1].split(\"(\")[1].split(\",\");\n                params.pop();\n                let color = step.info[1].split(\"RGB\")[1];\n                color = this.chooseColor(color);\n                this.changeEdgeColor(parseInt(params[0]),parseInt(params[1]), color);\n            }else if(step.type===\"changeNodeColor\"){\n                let idx = step.info[1].split(\"(\")[1].split(\",\")[0];\n                idx = parseInt(idx);\n                let color = step.info[1].split(\"RGB\")[1];\n                color = this.chooseColor(color);\n                this.changeNodeColor(idx, color);\n            }else if(step.type===\"Question\" && window.question){\n                let que = step.info[2];\n                let ans = step.info[3];\n                if(ans[0]===\"*\"){\n                    ans = ans.replace(/\\*/g, \"\");\n                    ans = _name[ans];\n                }\n                return this.ask(que, ans);   \n            }else if(step.type===\"showHelp\"){\n                let msg = step.info[1].split(\"(\")[1].split(\")\")[0];\n                layer.msg(msg, {time: 3000});\n                return setTimeout(()=>{    \n                    this.animate();\n                }, 3200);\n            }else if(step.type===\"showCode\"){\n                let msg = step.info[1].split(\"(\")[1].split(\")\")[0];\n                msg = parseInt(msg, 10);\n                return this.showCode(msg);\n            }\n\n            this.animate();  //重复执行\n\n        }, this.state.speed *1000 +70);\n    \n    }\n\n   \n    //学长原来是获取每一个动作信息－>此处改为获取每一个步骤(帧)的信息\n    getStep(actionStep){\n\n        console.log(\"get step:\"+actionStep.STEP_COUNT); //读取一帧的数据\n        let stepTemp=stepData.steps[actionStep.ACTION_COUNT].split('\\t')[3];  //得到帧的编号\n        var types=new Array(); //创建数组，用于保存动作信息\n        var infos=new Array(); \n\n        while(actionStep.STEP_COUNT==stepTemp){  //读取一个动作\n            console.log(\"get action: \"+actionStep.ACTION_COUNT);\n            if(!Array.isArray(stepData.steps))return null;\n            if(stepData.steps.length<= actionStep.ACTION_COUNT)return null;  \n\n            let info = stepData.steps[actionStep.ACTION_COUNT].split('\\t');  //第ACTION_COUNT条动作信息(作为数组保存在info)\n            //if(info==\"\")return null;                   \n            let type = info[1].split('(')[0];   //info[1]代表动作的解释：changeNodeColor(4,RGB(91,155,213))；  则type对应changeNodeColor\n            types.push(type);\n            infos.push(info);\n            actionStep.ACTION_COUNT++;\n            stepTemp=stepData.steps[actionStep.ACTION_COUNT].split('\\t')[3];  //得到帧的编号\n            if(stepData.steps[actionStep.ACTION_COUNT].split('\\t')[1].split('(')[0]===\"Question\"){ //question动作的帧编号位置不同!\n                stepTemp=stepData.steps[actionStep.ACTION_COUNT].split('\\t')[7];\n            }\n        }\n        return {types, infos};  //返回对象，对象的属性是键值对\n    }\n\n    chooseColor(color){\n        switch(color){\n            case \"(10,10,10))\": return this.INITIAL_LINK_COLOR;   //初始化边（接近黑色）\n            case \"(91,155,213))\": return this.INITIAL_NODE_COLOR; //初始化点（接近蓝色)\n            case \"(255,0,0))\": return this.SELECTED_LINK_COLOR;    //选中点、边（红色）\n            default: return \"#000000\";\n        }\n    }\n\n\n    changeNodeColor(idx, color){\n        let name = _name[idx];  //找到编号对应的点名\n        let S_NODE = this.state.S_NODE;\n        S_NODE.set(name,color);  //S_NODE是键值对，改变name对应点的状态\n        this.setState({S_NODE});\n    }\n    changeEdgeColor(idx1, idx2, color){\n        let name1 = _name[idx1];\n        let name2 = _name[idx2];\n\n        //let S_EDGE = this.state.S_EDGE;\n        //S_EDGE.push({name1, name2, color});\n        //this.setState({S_EDGE});\n\n        let links = this.props.link;\n        links.forEach(link=>{\n            if(link.polyline.isVisible()){\n                if((link.node1.name===name1&&link.node2.name===name2)||(link.node1.name===name2&&link.node2.name===name1)){\n                    link.polyline.setStrokeColor(color);\n                }\n            }\n        });\n        this.props.updateState(null, links);\n    }\n\n\n    checkLink(link, name1, name2){\n        let node1 = link.node1;\n        let node2 = link.node2;\n        if( (node1.name===name1 && node2.name===name2) || (node1.name===name2 && node2.name===name1) ){\n            return true;\n        }\n        return false;\n    }\n\n    //重置link颜色\n    resetColor(){\n        let links = this.props.link;\n        links.forEach(link=>{\n            if(link.polyline.isVisible())\n                link.polyline.setStrokeColor(this.DEFAULT_LINK_COLOR); \n        });\n        this.props.updateState(null, links);\n    }\n\n    /*获取元素的横坐标*/\n    getLeft(e){\n        var offset=e.offsetLeft;\n        if(e.offsetParent!=null){\n        offset+=this.getLeft(e.offsetParent);\n        } \n        return offset;\n    } \n\n    //设置起点终点\n    setSE(event){\n        event.preventDefault();\n        event.stopPropagation();\n        let that = this;\n        let name = event.target.attributes.id.value.split(\"_\").pop();\n\t\t/*\n\t\tlet menu = new nw.Menu();\n\t\tmenu.append(new nw.MenuItem({\n\t\t\tlabel: '设为起点',\n\t\t\tclick: function(){\n                that.setState({start: name});\n\t\t\t}\n\t\t}));\n\t\tmenu.append(new nw.MenuItem({\n\t\t\tlabel: '设为终点',\n\t\t\tclick: function(){\n                that.setState({end: name});\n\t\t\t}\n\t\t}));\n\t\tmenu.popup(event.clientX, event.clientY);*/\n\t\tlet menu = new MyMenu(\"MyMenu_Node_SVG\");\n\t\tmenu.append([{\n\t\t\tlabel: '设为起点',\n\t\t\tclick: function(){\n                that.setState({start: name});\n\t\t\t}\n        },{\n\t\t\tlabel: '设为终点',\n\t\t\tclick: function(){\n                that.setState({end: name});\n\t\t\t}\n        }]);\n        menu.popup(event.clientX, event.clientY);\n\t\t\n\t\treturn false;\n    }\n\n    //提问\n    ask(que, msg){\n        clearTimeout(window.timer);\n        let that = this;\n        window.layer.prompt({title: que}, function(text, index){\n            layer.closeAll();\n            if(text!=msg){\n                window.layer.msg('正确答案：'+msg, {time: 1000});\n                ///////////////////////////////////////////////////////\n                $.ajax({\n                    type:\"POST\",\n                    url:\"/collect\",\n                    data:{que:que,ans:text,msg:msg},\n                    success: function(json){\n                    },\n                    error: function(){\n                    }\n                });\n        ///////////////////////////////////////////////////////\n                setTimeout(()=>{\n                    that.animate();\n                }, 1100);\n            }else{\n                that.animate();\n            }\n        } );\n    }\n    showCode(msg){\n        let content = \"\";\n        if(msg === 1){\n            content = \n            `\n        <p style=\"white-space:pre-wrap !important; padding: 30px;\">    void DFS(Graph& G, int v)\n        {\n            <span style=\"color: red\">visited[v] = 1;\t</span>\n            for (int w = FirstAdjVex(G, v); w != -1; w = NextAdjVex(G, v, w))\n            {\n                if (!visited[w])\n                {\n                    DFS(G, w);\n                }\n            }\n        }</p>\n            `\n        }else if(msg === 2){\n            content = \n            `\n        <p style=\"white-space:pre-wrap !important; padding: 30px;\">    void DFS(Graph& G, int v)\n        {\n            visited[v] = 1;\t\n            <span style=\"color: red\">for (int w = FirstAdjVex(G, v); w != -1; w = NextAdjVex(G, v, w))\n            {\n                if (!visited[w])\n                {\n                    DFS(G, w);\n                }\n            }</span>\n        }</p>\n            `\n        }\n        let that = this;\n        //页面层\n        window.layer.open({\n            type: 1,\n            area: ['800px', '400px'], //宽高\n            content: content,\n            closeBtn: false,\n            title: '提示',\n            btn: '关闭',\n            yes: function(){\n                layer.closeAll();\n                that.animate();\n            }            \n        });\n    }\n\n\n   //****************************************************dd by cdz\n//执行动作：根据STEP_COUNT执行！！！\n    //注意：当Question、showHelp、showCode时，之所以return是为了结束当前函数，不再执行当前函数末尾的animate\n    //因为在else if中会使用layer，内部接着使用了setTimeout和animate继续下去\n\n    frame_animate(){  \n        // if(this.state.play!==\"play\")return;\n        //setTimeout(code,millisec), code是要执行的代码，lillisec是遇到setTimer后要等待多少毫秒才执行code!\n        //返回数值id，整型，可用于 取消 setTimeout 设置的函数clearTimeout(id)。也就是这个setTimeout的唯一标示符\n        window.timer = setTimeout(()=>{\n\n            let step = this.getStep(actionStep);  //获得每一步动作的数据(从类变量stepData中获得),包括type、info\n            layer.closeAll();\n            actionStep.STEP_COUNT++;\n            if(step===null){\n                this.stop();\n                return;\n            }\n\n            if(step.type===\"changeEdgeColor\"){\n                let params = step.info[1].split(\"(\")[1].split(\",\");\n                params.pop();\n                let color = step.info[1].split(\"RGB\")[1];\n                color = this.chooseColor(color);\n                this.changeEdgeColor(parseInt(params[0]),parseInt(params[1]), color);\n            }else if(step.type===\"changeNodeColor\"){\n                let idx = step.info[1].split(\"(\")[1].split(\",\")[0];\n                idx = parseInt(idx);\n                let color = step.info[1].split(\"RGB\")[1];\n                color = this.chooseColor(color);\n                this.changeNodeColor(idx, color);\n            }else if(step.type===\"Question\" && window.question){\n                let que = step.info[2];\n                let ans = step.info[3];\n                if(ans[0]===\"*\"){\n                    ans = ans.replace(/\\*/g, \"\");\n                    ans = _name[ans];\n                }\n                return this.ask(que, ans);   \n            }else if(step.type===\"showHelp\"){\n                let msg = step.info[1].split(\"(\")[1].split(\")\")[0];\n                layer.msg(msg, {time: 3000});\n                return setTimeout(()=>{    \n                    this.animate();\n                }, 3200);\n            }else if(step.type===\"showCode\"){\n                let msg = step.info[1].split(\"(\")[1].split(\")\")[0];\n                msg = parseInt(msg, 10);\n                return this.showCode(msg);\n            }\n\n            this.animate();  //重复执行\n\n        }, this.state.speed *1000 +70);\n    }\n\n\n   //倒退:为了减少不必要的理解错误，只能倒退到点和边初始化完成以后\n   animate_stepback(){\n    //不管处于什么状态，都使其暂停\n    this.setState({play: \"pause\"});\n    clearTimeout(window.timer);\n    layer.closeAll();\n   \n\n    actionStep.STEP_COUNT--;\n    let back_step = this.getStep(actionStep);\n    if(back_step===null){\n        this.stop();\n        return;\n    }\n\n    if(back_step.type===\"changeEdgeColor\"){\n        let params = back_step.info[1].split(\"(\")[1].split(\",\");\n        params.pop();\n        let color = back_step.info[1].split(\"RGB\")[1];\n        color = this.chooseColor(color);\n        if(color==this.SELECTED_LINK_COLOR)   //只对已选中的边进行改变,变为初始化后的样子\n            this.changeEdgeColor(parseInt(params[0]),parseInt(params[1]),this.INITIAL_LINK_COLOR);\n    }else if(back_step.type===\"changeNodeColor\"){\n        let idx = back_step.info[1].split(\"(\")[1].split(\",\")[0];\n        idx = parseInt(idx);\n        let color =back_step.info[1].split(\"RGB\")[1];\n        color = this.chooseColor(color);\n        if(color==this.SELECTED_NODE_COLOR)  //将选中的点改为初始化后的样子\n            this.changeNodeColor(idx, this.INITIAL_NODE_COLOR);\n    }else if(back_step.type===\"Question\" && window.question){\n        let que = back_step.info[2];\n        let ans = back_step.info[3];\n        if(ans[0]===\"*\"){\n            ans = ans.replace(/\\*/g, \"\");\n            ans = _name[ans];\n        }\n        //修改ask函数\n        let that = this;\n        window.layer.prompt({title: que}, function(text, index){\n            layer.closeAll();\n            if(text!=ans){\n                window.layer.msg('正确答案：'+ans, {time: 3000000});  //驻留在该帧\n            }\n        });  \n    }else if(back_step.type===\"showHelp\"){\n        let msg =back_step.info[1].split(\"(\")[1].split(\")\")[0];\n        layer.msg(msg, {time: 3000000});    //驻留在该帧\n        \n    }else if(back_step.type===\"showCode\"){\n        let msg = back_step.info[1].split(\"(\")[1].split(\")\")[0];\n        msg = parseInt(msg, 10);\n        let content = \"\";\n        if(msg === 1){\n            content = \n            `\n        <p style=\"white-space:pre-wrap !important; padding: 30px;\">    void DFS(Graph& G, int v)\n        {\n            <span style=\"color: red\">visited[v] = 1;\t</span>\n            for (int w = FirstAdjVex(G, v); w != -1; w = NextAdjVex(G, v, w))\n            {\n                if (!visited[w])\n                {\n                    DFS(G, w);\n                }\n            }\n        }</p>\n            `\n        }else if(msg === 2){\n            content = \n            `\n        <p style=\"white-space:pre-wrap !important; padding: 30px;\">    void DFS(Graph& G, int v)\n        {\n            visited[v] = 1;\t\n            <span style=\"color: red\">for (int w = FirstAdjVex(G, v); w != -1; w = NextAdjVex(G, v, w))\n            {\n                if (!visited[w])\n                {\n                    DFS(G, w);\n                }\n            }</span>\n        }</p>\n            `\n        }\n        let that = this;\n        //页面层\n        window.layer.open({\n            type: 1,\n            area: ['800px', '400px'], //宽高\n            content: content,\n            closeBtn: false,\n            title: '提示',\n            btn: '关闭',\n            yes: function(){\n                layer.closeAll();\n            }            \n        });\n    }\n   }\n\n   //前进\n   animate_stepforward(){\n        //不管处于什么状态，都使其暂停\n    this.setState({play: \"pause\"});\n    clearTimeout(window.timer);\n    layer.closeAll();\n\n    actionStep.STEP_COUNT++;\n    let forward_step = this.getStep(actionStep);\n    if(forward_step===null){\n        this.stop();\n        return;\n    }\n\n    if(forward_step.type===\"changeEdgeColor\"){\n        let params = forward_step.info[1].split(\"(\")[1].split(\",\");\n        params.pop();\n        let color = forward_step.info[1].split(\"RGB\")[1];\n        color = this.chooseColor(color);\n        this.changeEdgeColor(parseInt(params[0]),parseInt(params[1]),color);\n    }else if(forward_step.type===\"changeNodeColor\"){\n        let idx = forward_step.info[1].split(\"(\")[1].split(\",\")[0];\n        idx = parseInt(idx);\n        let color =forward_step.info[1].split(\"RGB\")[1];\n        color = this.chooseColor(color);\n        this.changeNodeColor(idx,color);\n    }else if(forward_step.type===\"Question\" && window.question){\n        let que = forward_step.info[2];\n        let ans = forward_step.info[3];\n        if(ans[0]===\"*\"){\n            ans = ans.replace(/\\*/g, \"\");\n            ans = _name[ans];\n        }\n        //修改ask函数\n        let that = this;\n        window.layer.prompt({title: que}, function(text, index){\n            layer.closeAll();\n            if(text!=ans){\n                window.layer.msg('正确答案：'+ans, {time: 3000000});  //驻留在该帧\n            }\n        });  \n    }else if(forward_step.type===\"showHelp\"){\n        let msg =forward_step.info[1].split(\"(\")[1].split(\")\")[0];\n        layer.msg(msg, {time: 3000000});    //驻留在该帧\n        \n    }else if(forward_step.type===\"showCode\"){\n        let msg = forward_step.info[1].split(\"(\")[1].split(\")\")[0];\n        msg = parseInt(msg, 10);\n        let content = \"\";\n        if(msg === 1){\n            content = \n            `\n        <p style=\"white-space:pre-wrap !important; padding: 30px;\">    void DFS(Graph& G, int v)\n        {\n            <span style=\"color: red\">visited[v] = 1;\t</span>\n            for (int w = FirstAdjVex(G, v); w != -1; w = NextAdjVex(G, v, w))\n            {\n                if (!visited[w])\n                {\n                    DFS(G, w);\n                }\n            }\n        }</p>\n            `\n        }else if(msg === 2){\n            content = \n            `\n        <p style=\"white-space:pre-wrap !important; padding: 30px;\">    void DFS(Graph& G, int v)\n        {\n            visited[v] = 1;\t\n            <span style=\"color: red\">for (int w = FirstAdjVex(G, v); w != -1; w = NextAdjVex(G, v, w))\n            {\n                if (!visited[w])\n                {\n                    DFS(G, w);\n                }\n            }</span>\n        }</p>\n            `\n        }\n        let that = this;\n        //页面层\n        window.layer.open({\n            type: 1,\n            area: ['800px', '400px'], //宽高\n            content: content,\n            closeBtn: false,\n            title: '提示',\n            btn: '关闭',\n            yes: function(){\n                layer.closeAll();\n            }            \n        });\n    }\n\n   }\n\n}\n\n\n\n\n\nclass Node extends React.Component{\n    constructor(props){\n        super(props);\n        this.SELECT_COLOR = \"#300\";\n        this.DEFAULT_COLOR = \"#3C9\";\n    }\n\n    //<g>元素通常用来对相关图形元素进行分组\n    //onContextMenu：对应右击鼠标的响应事件\n    render(){\n        return (\n            <g id={\"node_\"+this.props.name} onContextMenu={this.props.setSE}>\n                <circle id={\"node_circle_\"+this.props.name} cx={this.props.x} cy={this.props.y} r={this.props.r || 20} fill={this.props.color ||　this.DEFAULT_COLOR}></circle>\n                <text id={\"node_text_\"+this.props.name} x={this.props.x} y={this.props.y} fill=\"black\" textAnchor=\"middle\" dominantBaseline=\"middle\" style={{fontSize: \"14px\"}}>{this.props.hide || this.props.name}</text>\n                <text id={\"node_value\"+this.props.name} x={this.props.x} y={this.props.y+10} fill=\"black\" textAnchor=\"middle\" dominantBaseline=\"middle\" style={{fontSize: \"14px\"}}>1234</text>\n            </g>\n        );\n    }\n    hover(event){\n        console.log(event.target.attributes.fill);\n        console.log(event.target.attributes);\n        let attributes = event.target.attributes;\n    }\n}\n\nclass Link extends React.Component{\n\n    constructor(props){\n        super(props);\n        this.SELECT_COLOR = \"#900\";\n        this.DEFAULT_COLOR = this.props.color;\n    }\n    render(){\n        this.DEFAULT_COLOR = this.props.color;\n        if(window.showDis)  //需要显示距离时返回(dijkstra)\n            return (\n                <g id={\"link_\"+this.props.from+\"_\"+this.props.to}>\n                    <line x1={this.props.x1} y1={this.props.y1} x2={this.props.x2} y2={this.props.y2} stroke={this.props.color} strokeWidth=\"5\" style={{cursor: \"pointer\"}} onMouseEnter={this.hover.bind(this)} onMouseLeave={this.hover.bind(this)}/>\n                    <text x={(this.props.x1+this.props.x2)/2} y={(this.props.y1+this.props.y2)/2}  style={{fontSize:\"15px\"}}>{this.props.distance}</text>\n                </g>\n            );\n        else\n            return (\n                <g id={\"link_\"+this.props.from+\"_\"+this.props.to}>\n                    <line x1={this.props.x1} y1={this.props.y1} x2={this.props.x2} y2={this.props.y2} stroke={this.props.color} strokeWidth=\"5\" style={{cursor: \"pointer\"}} onMouseEnter={this.hover.bind(this)} onMouseLeave={this.hover.bind(this)}/>\n                </g>\n            );\n    }\n    hover(event){\n        let attributes = event.target.attributes;\n        attributes.stroke.value===this.SELECT_COLOR ? attributes.stroke.value=this.DEFAULT_COLOR : attributes.stroke.value=this.SELECT_COLOR;\n    }\n}\n\nexport default GraphSVG;"]},"metadata":{},"sourceType":"module"}